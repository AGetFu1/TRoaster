//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能导致不正确的行为，并在以下条件下丢失:
//     代码重新生成。
// </auto-generated>
//------------------------------------------------------------------------------

namespace RTM
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TMSBaseModel", Namespace="http://schemas.datacontract.org/2004/07/SEMI.TMS.Models.ProductionManage")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RTM.TMSTrackErrorModel))]
    public partial class TMSBaseModel : object
    {
        
        private string ReturnCodeField;
        
        private string ReturnMessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnCode
        {
            get
            {
                return this.ReturnCodeField;
            }
            set
            {
                this.ReturnCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnMessage
        {
            get
            {
                return this.ReturnMessageField;
            }
            set
            {
                this.ReturnMessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TMSTrackErrorModel", Namespace="http://schemas.datacontract.org/2004/07/SEMI.TMS.Models.ProductionManage")]
    public partial class TMSTrackErrorModel : RTM.TMSBaseModel
    {
        
        private RTM.TMSErrorModel[] DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RTM.TMSErrorModel[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TMSErrorModel", Namespace="http://schemas.datacontract.org/2004/07/SEMI.TMS.Models.ProductionManage")]
    public partial class TMSErrorModel : object
    {
        
        private string ErrorCodeField;
        
        private string ErrorMsgField;
        
        private string HandlerIdField;
        
        private string LotIDField;
        
        private System.Nullable<System.DateTime> SystemTimeField;
        
        private string TesterIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg
        {
            get
            {
                return this.ErrorMsgField;
            }
            set
            {
                this.ErrorMsgField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HandlerId
        {
            get
            {
                return this.HandlerIdField;
            }
            set
            {
                this.HandlerIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LotID
        {
            get
            {
                return this.LotIDField;
            }
            set
            {
                this.LotIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SystemTime
        {
            get
            {
                return this.SystemTimeField;
            }
            set
            {
                this.SystemTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TesterId
        {
            get
            {
                return this.TesterIdField;
            }
            set
            {
                this.TesterIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RTM.IProductionService")]
    public interface IProductionService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/CheckTMSTrackout", ReplyAction="http://tempuri.org/IProductionService/CheckTMSTrackoutResponse")]
        System.Threading.Tasks.Task<RTM.TMSBaseModel> CheckTMSTrackoutAsync(string EqpId, string LotId, string ProcessFlowCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/GetTMSTrackError", ReplyAction="http://tempuri.org/IProductionService/GetTMSTrackErrorResponse")]
        System.Threading.Tasks.Task<RTM.TMSTrackErrorModel> GetTMSTrackErrorAsync(string HandlerId, string TesterId, string LotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/HoldLot", ReplyAction="http://tempuri.org/IProductionService/HoldLotResponse")]
        System.Threading.Tasks.Task<string> HoldLotAsync(string LotId, string HoldCode, string userInfo, string entityStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/UpdateMaterialLength", ReplyAction="http://tempuri.org/IProductionService/UpdateMaterialLengthResponse")]
        System.Threading.Tasks.Task<string> UpdateMaterialLengthAsync(string MaterialNo, double Length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/VerifyMaterial", ReplyAction="http://tempuri.org/IProductionService/VerifyMaterialResponse")]
        System.Threading.Tasks.Task<string> VerifyMaterialAsync(string MaterialNo, string EqpId, string LotId, string MaterialType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/CheckPeelTestData", ReplyAction="http://tempuri.org/IProductionService/CheckPeelTestDataResponse")]
        System.Threading.Tasks.Task<string> CheckPeelTestDataAsync(string WorkOrder, string EqpId, string PeelOpportunity, string Tapes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/EqpSelfChecking", ReplyAction="http://tempuri.org/IProductionService/EqpSelfCheckingResponse")]
        System.Threading.Tasks.Task<string> EqpSelfCheckingAsync(string HandlerId, string TesterId, string LotId, string Index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/EqpAction", ReplyAction="http://tempuri.org/IProductionService/EqpActionResponse")]
        System.Threading.Tasks.Task<string> EqpActionAsync(string EqpId, string Action, string Reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/GetTooling", ReplyAction="http://tempuri.org/IProductionService/GetToolingResponse")]
        System.Threading.Tasks.Task<string> GetToolingAsync(string LotId, string Eqp2Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/GetSummary", ReplyAction="http://tempuri.org/IProductionService/GetSummaryResponse")]
        System.Threading.Tasks.Task<string> GetSummaryAsync(string LotId, string ProcessFlow, string EqpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductionService/GetSuitsInfo", ReplyAction="http://tempuri.org/IProductionService/GetSuitsInfoResponse")]
        System.Threading.Tasks.Task GetSuitsInfoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IProductionServiceChannel : RTM.IProductionService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class ProductionServiceClient : System.ServiceModel.ClientBase<RTM.IProductionService>, RTM.IProductionService
    {
        
        /// <summary>
        /// 实现此分部方法，配置服务终结点。
        /// </summary>
        /// <param name="serviceEndpoint">要配置的终结点</param>
        /// <param name="clientCredentials">客户端凭据</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ProductionServiceClient() : 
                base(ProductionServiceClient.GetDefaultBinding(), ProductionServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IProductionService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductionServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ProductionServiceClient.GetBindingForEndpoint(endpointConfiguration), ProductionServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductionServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ProductionServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductionServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ProductionServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<RTM.TMSBaseModel> CheckTMSTrackoutAsync(string EqpId, string LotId, string ProcessFlowCode)
        {
            return base.Channel.CheckTMSTrackoutAsync(EqpId, LotId, ProcessFlowCode);
        }
        
        public System.Threading.Tasks.Task<RTM.TMSTrackErrorModel> GetTMSTrackErrorAsync(string HandlerId, string TesterId, string LotId)
        {
            return base.Channel.GetTMSTrackErrorAsync(HandlerId, TesterId, LotId);
        }
        
        public System.Threading.Tasks.Task<string> HoldLotAsync(string LotId, string HoldCode, string userInfo, string entityStr)
        {
            return base.Channel.HoldLotAsync(LotId, HoldCode, userInfo, entityStr);
        }
        
        public System.Threading.Tasks.Task<string> UpdateMaterialLengthAsync(string MaterialNo, double Length)
        {
            return base.Channel.UpdateMaterialLengthAsync(MaterialNo, Length);
        }
        
        public System.Threading.Tasks.Task<string> VerifyMaterialAsync(string MaterialNo, string EqpId, string LotId, string MaterialType)
        {
            return base.Channel.VerifyMaterialAsync(MaterialNo, EqpId, LotId, MaterialType);
        }
        
        public System.Threading.Tasks.Task<string> CheckPeelTestDataAsync(string WorkOrder, string EqpId, string PeelOpportunity, string Tapes)
        {
            return base.Channel.CheckPeelTestDataAsync(WorkOrder, EqpId, PeelOpportunity, Tapes);
        }
        
        public System.Threading.Tasks.Task<string> EqpSelfCheckingAsync(string HandlerId, string TesterId, string LotId, string Index)
        {
            return base.Channel.EqpSelfCheckingAsync(HandlerId, TesterId, LotId, Index);
        }
        
        public System.Threading.Tasks.Task<string> EqpActionAsync(string EqpId, string Action, string Reason)
        {
            return base.Channel.EqpActionAsync(EqpId, Action, Reason);
        }
        
        public System.Threading.Tasks.Task<string> GetToolingAsync(string LotId, string Eqp2Id)
        {
            return base.Channel.GetToolingAsync(LotId, Eqp2Id);
        }
        
        public System.Threading.Tasks.Task<string> GetSummaryAsync(string LotId, string ProcessFlow, string EqpId)
        {
            return base.Channel.GetSummaryAsync(LotId, ProcessFlow, EqpId);
        }
        
        public System.Threading.Tasks.Task GetSuitsInfoAsync()
        {
            return base.Channel.GetSuitsInfoAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IProductionService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IProductionService))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.99.158:8083/ProductionService.svc");
            }
            throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ProductionServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IProductionService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ProductionServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IProductionService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IProductionService,
        }
    }
}
